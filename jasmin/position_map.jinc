require "consts.jinc"
require "params.jinc"
require "util.jinc"

// scan implementation
inline
fn _scan_position_map_get(
  reg u64 position_map,
  reg u64 block_id,
  reg u64 position
)
{
  reg u64 i;
  reg u8 cond;
  reg bool b;

  // linear scan of array so that every access looks the same.
  i = 0;
  while (i < POSITION_MAP_SIZE)
  {
    b = (64u)i == block_id;
    cond = #SETcc(b);
    _cond_obv_cpy_u64(cond, position, position_map);
    position_map = #LEA(position_map + 8);
    i = #LEA(i + 1);
  }
}

inline
fn _scan_position_map_set(
  #public reg u64 position_map,
  #secret reg u64 block_id,
  #secret reg u64 position
) -> #secret reg u64
{
  reg u64 prev_position i;
  reg u8 cond;
  reg bool b;

  prev_position = position;
  // linear scan of array so that every access looks the same.
  i = 0;
  while (i < POSITION_MAP_SIZE)
  {
    b = (64u)i == block_id;
    cond = #SETcc(b);
    
    reg u64 tmp va;
    va = (64u)[position_map];
    tmp = _ternary(cond, prev_position, va);
    (u64)[position_map] = tmp;
    prev_position = prev_position;
    prev_position = _ternary(cond, va, prev_position);
    prev_position = prev_position;

    position_map = #LEA(position_map + 8);
    i = #LEA(i + 1);
  }
  return prev_position;
}

inline
fn position_map_get(
  reg u64 position_map,
  reg u64 block_id,
  reg u64 position
)
{
  reg u64 data;
  if (POSITION_MAP_SIZE < SCAN_THRESHOLD) {
    data = [position_map + 8 * 3];  // *data
    _scan_position_map_get(data, block_id, position);
  }
}

inline
fn position_map_read_then_set(
  #public reg u64 position_map,
  #secret reg u64 block_id,
  #secret reg u64 position
) -> #secret reg u64
{
  reg u64 x data;
  if (POSITION_MAP_SIZE < SCAN_THRESHOLD) {
    #declassify data = [position_map + 8 * 3];  // *data
    x = _scan_position_map_set(data, block_id, position);
  } else {
    // implement oram
    x = 0;
  }
  return x;
}