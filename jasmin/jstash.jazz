require "stash.jinc"

export
fn stash_add_path_bucket_jazz(
  reg u64 stash bucket_store,
  reg u64 bucket_id target_block_id,
  reg u64 target
)
{
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_p;
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_s;
  inline int i;

  target_p = target_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { target_p[u64 i] = (u64)[target + 8 * i]; }
  target_p = _i_stash_add_path_bucket(stash, bucket_store, bucket_id, target_block_id, target_p);

  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { (u64)[target + 8 * i] = target_p[u64 i]; }
}

export
fn stash_scan_overflow_for_target_jazz(
  reg u64 stash,
  reg u64 target_block_id,
  reg u64 target
)
{
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_p;
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_s;
  inline int i;

  target_p = target_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { target_p[u64 i] = (u64)[target + 8 * i]; }
  target_p = _i_stash_scan_overflow_for_target(stash, target_block_id, target_p);

  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { (u64)[target + 8 * i] = target_p[u64 i]; }
}

export
fn stash_add_block_jazz(
  reg u64 stash new_block
)
{
  stash = stash;
  new_block = new_block;
  stash_add_block(stash, new_block);
}

export
fn stash_assign_block_to_bucket_jazz(
  reg u64 stash path,
  reg u8 t,
  reg u64 index
)
{
  t = t;
  _stash_assign_block_to_bucket(stash, path, t, index);
}

export
fn stash_place_empty_blocks_jazz(
  reg u64 stash
)
{
  _stash_place_empty_blocks(stash);
}

export
fn stash_assign_buckets_jazz(
  reg u64 stash path
)
{
  _stash_assign_buckets(stash, path);
}

export
fn cond_copy_block_jazz(
  reg u8 cond,
  reg u64 dst src
)
{
  _cond_copy_block(cond, dst, src);
}

export
fn cond_swap_blocks_jazz(
  reg u8 b,
  reg u64 b1 b2
)
{
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] a;
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] a_s;
  inline int i;

  a = a_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { a[i] = [b1 + 8 * i]; }
  a = _i_cond_swap_blocks(b, a, b2);

  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS
  { [b1 + 8 * i] = a[i]; }
}

export
fn odd_even_msort_jazz(
  reg u64 blocks block_level_assignments,
  reg u64 lb ub,
  reg u8 direction
)
{
  blocks = blocks;
  block_level_assignments = block_level_assignments;
  _odd_even_msort(blocks, block_level_assignments, lb, ub);
}

export
fn stash_build_path_jazz(
  reg u64 stash path
)
{
  stash_build_path(stash, path);
}

export
fn stash_clear_jazz(
  reg u64 stash
)
{
  stash_clear(stash);
}
