// bucket size definition
param int ENCRYPTED_BUCKET_SIZE = 4096; // 4KB
param int DECRYPTED_BUCKET_SIZE = ENCRYPTED_BUCKET_SIZE;
param int BLOCKS_PER_BUCKET = 3;

param int DECRYPTED_BLOCK_SIZE_QWORDS = (DECRYPTED_BUCKET_SIZE / BLOCKS_PER_BUCKET) / 8;
param int DECRYPTED_BLOCK_SIZE = DECRYPTED_BLOCK_SIZE_QWORDS * 8;
param int UNROUNDED_BLOCK_DATA_SIZE_BYTES = (DECRYPTED_BLOCK_SIZE - 16);
param int BLOCK_DATA_SIZE_QWORDS = (UNROUNDED_BLOCK_DATA_SIZE_BYTES / 8);
param int BLOCK_DATA_SIZE = (BLOCK_DATA_SIZE_QWORDS * 8);

// oram size definition
param int ORAM_CAPACITY = 1<<22;
param int STASH_OVERFLOW_SIZE = 100;


// modify only if size definitions were modified
param int CAPACITY_BLOCKS = (ORAM_CAPACITY / BLOCK_DATA_SIZE_QWORDS) + 1; // remove +1 if CAPACITY % BLOCK_DATA_SIZE_QWORDS == 0
param int PATH_LENGTH = 15; // ceil_log2(CAPACITY_BLOCKS)
param int NUM_PATH_BLOCKS = BLOCKS_PER_BUCKET * PATH_LENGTH;
param int STASH_NUM_BLOCKS = STASH_OVERFLOW_SIZE + NUM_PATH_BLOCKS;
param int STASH_BLOCKS_SIZE = DECRYPTED_BLOCK_SIZE_QWORDS * STASH_NUM_BLOCKS;
param int POSITION_MAP_SIZE = CAPACITY_BLOCKS;

param int INNER_CAPACITY_BLOCKS = (CAPACITY_BLOCKS / BLOCK_DATA_SIZE_QWORDS) + 1;
param int INNER_PATH_LENGTH = 8;
param int INNER_NUM_PATH_BLOCKS = BLOCKS_PER_BUCKET * INNER_PATH_LENGTH;
param int INNER_STASH_NUM_BLOCKS = STASH_OVERFLOW_SIZE + INNER_NUM_PATH_BLOCKS;
param int INNER_STASH_BLOCKS_SIZE = DECRYPTED_BLOCK_SIZE_QWORDS * INNER_STASH_NUM_BLOCKS;
param int INNER_POSITION_MAP_SIZE = INNER_CAPACITY_BLOCKS;