require "consts.jinc"
require "util.jinc"
require "bucket.jinc"

inline
fn stash_path_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 p;
  p = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  return p;
}

inline
fn stash_overflow_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 p;
  p = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  return p;
}

inline
fn _stash_extend_overflow(
  reg u64 stash
)
{
  reg u64 old_num_blocks new_num_blocks;
  reg u64 addr old_len new_len flags new_addr prot fd offset err tmp;
  reg u64 blocks bucket_assignments;
  stack u64 blocks_s;
  inline int i;

  old_num_blocks = [stash + 8 * NUM_BLOCKS_ADDR];
  new_num_blocks = #LEA(old_num_blocks + STASH_GROWTH_INCREMENT);

  // (re)allocate new space, free the old
  blocks = [stash];
  old_len = old_num_blocks * DECRYPTED_BLOCK_SIZE;
  () = #spill(old_num_blocks);
  new_len = new_num_blocks * DECRYPTED_BLOCK_SIZE;
  flags = 1;
  new_addr = 0;
  blocks = blocks;
  new_addr = #mremap(blocks, old_len, new_len, flags, new_addr);
  [stash] = new_addr;
  blocks_s = new_addr;

  // free bucket_assignments
  bucket_assignments = [stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  () = #unspill(old_num_blocks);
  old_len = old_num_blocks * 8;
  err = #munmap(bucket_assignments, old_len);

  // mmap memory for bucket_assignments
  addr = 0;
  new_len = new_num_blocks * 8;
  prot = 0x1 | 0x2;   // PROT_READ | PROT_WRITE
  flags = 0x2 | 0x20; // MAP_PRIVATE | MAP_ANONYMOUS
  fd = -1;
  offset = 0;
  new_addr = #mmap(addr, new_len, prot, flags, fd, offset);
  [stash + 8 * BUCKET_ASSIGNMENTS_ADDR] = new_addr;

  // update our alias pointers
  blocks = blocks_s;
  tmp = #LEA(blocks + PATH_LENGTH * BLOCKS_PER_BUCKET * DECRYPTED_BLOCK_SIZE);
  [stash + 8 * PATH_BLOCKS_ADDR] = blocks;
  [stash + 8 * OVERFLOW_BLOCKS_ADDR] = tmp;

  // initialize new memory
  () = #unspill(old_num_blocks);
  old_num_blocks *= DECRYPTED_BLOCK_SIZE;
  blocks = #LEA(blocks + old_num_blocks);
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS * STASH_GROWTH_INCREMENT
  {
    [blocks + 8 * i] = -1;
  }

  // update counts
  [stash + 8 * NUM_BLOCKS_ADDR] = new_num_blocks;
  [stash + 8 * OVERFLOW_CAPACITY_ADDR] += STASH_GROWTH_INCREMENT;
}

// returns the index of the last nonempty blocks in overflow
fn _stash_overflow_ub(
  reg u64 stash
) -> reg u64
{
  reg u64 i j overflow_blocks bid offset;

  i = (64u)[stash + 8 * OVERFLOW_CAPACITY_ADDR];
  overflow_blocks = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  offset = i;
  offset *= 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  overflow_blocks += offset;
  while (i > 0) {
    overflow_blocks -= 8 * DECRYPTED_BLOCK_SIZE_QWORDS; // (i - 1)
    bid = (64u)[overflow_blocks];
    if bid != EMPTY_BLOCK_ID { j = i; i = 1; }  // TODO: avoid jump
    else { j = 0; }
    i -= 1;
  }
  return j;
}

inline
fn stash_num_overflow_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 r i overflow_capacity overflow_blocks bid;
  reg u8 cond;
  reg bool b;
  r = 0; i = 0;
  overflow_blocks = stash_overflow_blocks(stash);
  overflow_capacity = (64u)[stash + 8 * OVERFLOW_CAPACITY_ADDR];
  while (i < overflow_capacity) {
    bid = (64u)[overflow_blocks + 8 * (i + BLOCK_DATA_SIZE_QWORDS)];
    b = bid != EMPTY_BLOCK_ID;
    cond = #SETcc(b);
    r += (64u)cond;
  }
  return r;
}

inline
fn _first_block_in_bucket_for_level(
  reg u64 stash,
  reg u64 level
) -> reg u64
{
  reg u64 p offset;
  p = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  offset = level * BLOCKS_PER_BUCKET;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS * 8;
  p = #LEA(p + offset);
  return p;
}

inline
fn _cond_copy_block(
  reg u8 cond,
  reg u64 dst src
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    _cond_obv_cpy_u64(cond, dst, src);
    dst = #LEA(dst + 8);
    src = #LEA(src + 8);
  }
}

inline
fn _i_cond_copy_block(
  reg u8 cond,
  reg u64 dst,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] src
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS]
{
  reg u64 tmp va;
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    va = (64u)[dst];
    tmp = _ternary(cond, src[u64 i], va);
    (u64)[dst] = tmp;
    dst = #LEA(dst + 8);
  }
  return src;
}

inline
fn _cond_swap_blocks(
  reg u8 cond,
  reg u64 a b
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    _cond_obv_swap_u64(cond, a, b);
    a = #LEA(a + 8);
    b = #LEA(b + 8);
  }
}

inline
fn _i_cond_swap_blocks(
  reg u8 cond,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] a,
  reg u64 b
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS]
{
  reg u64 tmp rb;
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    rb = (64u)[b];
    tmp = _ternary(cond, a[u64 i], rb);
    (u64)[b] = tmp;
    a[u64 i] = _ternary(cond, rb, a[u64 i]);
    b = #LEA(b + 8);
  }
  return a;
}

// Precondition: `target` is an empty block OR no block in the bucket has ID equal to `target_block_id`
// Postcondition: No block in the bucket has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn stash_add_path_bucket(
  reg u64 stash bucket_store,
  reg u64 bucket_id target_block_id,
  reg u64 target
)
{
  reg u64 lvl bucket_blocks bid;
  reg u8 c;
  reg bool cond;
  inline int i;

  lvl = tree_path_level(bucket_id);
  bucket_blocks = _first_block_in_bucket_for_level(stash, lvl);
  bucket_store_read_bucket_blocks(bucket_store, bucket_id, bucket_blocks);
  for i = 0 to BLOCKS_PER_BUCKET
  {
    bid = (64u)[bucket_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    _cond_swap_blocks(c, target, bucket_blocks);
    bucket_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  }
}

fn _i_stash_add_path_bucket(
  reg u64 stash bucket_store,
  reg u64 bucket_id target_block_id,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS]
{
  reg u64 lvl bucket_blocks bid;
  reg u8 c;
  reg bool cond;
  inline int i;

  lvl = tree_path_level(bucket_id);
  bucket_blocks = _first_block_in_bucket_for_level(stash, lvl);
  bucket_store_read_bucket_blocks(bucket_store, bucket_id, bucket_blocks);
  for i = 0 to BLOCKS_PER_BUCKET
  {
    bid = (64u)[bucket_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    target = _i_cond_swap_blocks(c, target, bucket_blocks);
    bucket_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  }
  return target;
}

// Precondition: `target` is an empty block OR no block in the overflow has ID equal to `target_block_id`
// Postcondition: No block in the overflow has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn stash_scan_overflow_for_target(
  reg u64 stash,
  reg u64 target_block_id,
  reg u64 target
)
{
  reg u64 ub i bid overflow_blocks offset;
  reg u8 c;
  reg bool cond;

  ub = _stash_overflow_ub(stash);
  overflow_blocks = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  i = 0;
  while (i < ub)
  {
    bid = (64u)[overflow_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    _cond_swap_blocks(c, target, overflow_blocks);
    overflow_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
    i += 1;
  }
}

fn _i_stash_scan_overflow_for_target(
  reg u64 stash,
  reg u64 target_block_id,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS]
{
  reg u64 ub i bid overflow_blocks offset;
  reg u8 c;
  reg bool cond;

  ub = _stash_overflow_ub(stash);
  overflow_blocks = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  i = 0;
  while (i < ub)
  {
    bid = (64u)[overflow_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    target = _i_cond_swap_blocks(c, target, overflow_blocks);
    overflow_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
    i += 1;
  }
  return target;
}

// Precondition: there is no block with ID `new_block->id` anywhere in the stash - neither the path_Stash nor the overflow.
inline
fn stash_add_block(
  reg u64 stash new_block
)
{
  reg u64 bid overflow_capacity overflow_blocks i tmp;
  reg u8 c1 c2;
  reg bool b;

  overflow_blocks = stash_overflow_blocks(stash);
  overflow_capacity = [stash + 8 * OVERFLOW_CAPACITY_ADDR];

  c1 = 0; // inserted
  while {
    i = 0;
    while (i < overflow_capacity)
    {
      bid = [overflow_blocks];
      // cond
      c1 = !c1;
      b = bid == EMPTY_BLOCK_ID;
      c2 = #SETcc(b);
      c2 &= c1;
      _cond_copy_block(c2, overflow_blocks, new_block);
      c1 = !c1;
      c1 |= c2;
      i += 1;
      overflow_blocks = #LEA(overflow_blocks + 8 * DECRYPTED_BLOCK_SIZE_QWORDS);
    }
  } (c1 == 0) { // !inserted
    _stash_extend_overflow(stash);
  }
}

inline
fn _i_stash_add_block(
  reg u64 stash,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] new_block
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS]
{
  reg u64 bid overflow_capacity overflow_blocks i tmp;
  reg u8 c1 c2;
  reg bool b;

  overflow_blocks = stash_overflow_blocks(stash);
  overflow_capacity = [stash + 8 * OVERFLOW_CAPACITY_ADDR];

  c1 = 0; // inserted
  while {
    i = 0;
    while (i < overflow_capacity)
    {
      bid = [overflow_blocks];
      // cond
      c1 = !c1;
      b = bid == EMPTY_BLOCK_ID;
      c2 = #SETcc(b);
      c2 &= c1;
      new_block = _i_cond_copy_block(c2, overflow_blocks, new_block);
      c1 = !c1;
      c1 |= c2;
      i += 1;
      overflow_blocks = #LEA(overflow_blocks + 8 * DECRYPTED_BLOCK_SIZE_QWORDS);
    }
  } (c1 == 0) { // !inserted
    _stash_extend_overflow(stash);
  }

  return new_block;
}

inline
fn _stash_assign_block_to_bucket(
  reg u64 stash path,
  reg u8 t, // is_path_block
  reg u64 index
)
{
  // standard variables
  reg u64 max_level assignment_index lvl;
  // pointer variables
  reg u64 path_blocks block bucket_occupancy bucket_assignments;
  // temporary variables
  reg u64 r1 r2 bucket_id bid bpos tree_bound tmp;
  // boolean variables
  reg u8 c1 c2 c3;
  reg bool b;
  
  // the block cannot be assigned to this level or higher
  r1 = index;
  tmp = BLOCKS_PER_BUCKET;
  r1 = r1 / tmp;
  r1 = #LEA(r1 + 1);
  r2 = (64u)PATH_LENGTH;
  max_level = _ternary(t, r1, r2);

  r2 = #LEA(BLOCKS_PER_BUCKET * PATH_LENGTH + index);
  assignment_index = _ternary(t, index, r2);

  path_blocks = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  tmp = assignment_index;
  tmp *= 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  bid = (64u)[path_blocks + tmp];
  bpos = (64u)[path_blocks + tmp + 8];

  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  () = #spill(path, stash, assignment_index, bucket_assignments);

  c1 = #set0_8(); // is_assigned
  lvl = 0;
  while (lvl < max_level)
  {
    r2 = (64u)[bucket_occupancy + 8 * lvl];
    () = #unspill(path);
    bucket_id = (64u)[path + 8 + 8 * lvl];

    c1 = !c1;
    // is_valid
    tree_bound = tree_path_lower_bound(bucket_id);
    b = tree_bound <= bpos;
    c2 = #SETcc(b);
    c2 &= c1;
    tree_bound = tree_path_upper_bound(bucket_id);
    b = tree_bound >= bpos;
    c3 = #SETcc(b);
    c2 &= c3;
    // bucket_has_room
    b = r2 < BLOCKS_PER_BUCKET;
    c3 = #SETcc(b);
    c2 &= c3;
    // not is_empty
    b = bid != EMPTY_BLOCK_ID;
    c3 = #SETcc(b);
    c2 &= c3;
    // is_assigned = cond | is_assigned;
    c1 = !c1;
    c1 |= c2;
    b = c2 != 0;
    
    // If `b` is true, put it in the bucket: increment the bucket occupancy and set the bucket assignment
    // for this position.
    // increment this, it will only get saved if `b` is true.
    r1 = #LEA(r2 + 1);
    r1 = #CMOVcc(b, r1, r2);
    () = #unspill(assignment_index, bucket_assignments);
    (u64)[bucket_occupancy + 8 * lvl] = r1;
    r1 = (64u)[bucket_assignments + 8 * assignment_index];
    r1 = #CMOVcc(b, lvl, r1);
    (u64)[bucket_assignments + 8 * assignment_index] = r1;
    
    lvl = #LEA(lvl + 1);
  }
}

inline
fn _stash_place_empty_blocks(
  reg u64 stash
)
{
  // standard variables
  reg u64 curr_bucket;
  // pointer variables
  reg u64 blocks bucket_occupancy bucket_assignments;
  // temporary variables
  reg u64 tmp_bo bid i tmp_r offset;
  // boolean variables
  reg u8 c1 c2;
  reg bool b;
  inline int j;

  blocks = (64u)[stash];
  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  curr_bucket = #set0();
  i = 0;
  while (i < STASH_NUM_BLOCKS)
  {
    c1 = 0; // found_curr_bucket
    for j = 0 to PATH_LENGTH
    {
      c1 = !c1;
      // bucket_has_room
      tmp_bo = (64u)[bucket_occupancy + 8 * j];
      b = tmp_bo != BLOCKS_PER_BUCKET;
      c2 = #SETcc(b);
      c2 &= c1;
      // set_curr_bucket
      b = c2 != 0;
      tmp_r = (64u)j;
      curr_bucket = #CMOVcc(b, tmp_r, curr_bucket);
      c1 = !c1;
      c1 |= c2;
    }
    tmp_bo = (64u)[bucket_occupancy + 8 * curr_bucket];
    offset = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * i;
    bid = (64u)[blocks + offset];
    // cond_place_in_bucket
    b = bid == EMPTY_BLOCK_ID;
    c2 = #SETcc(b);
    b = tmp_bo < BLOCKS_PER_BUCKET;
    c1 = #SETcc(b);
    c1 &= c2;
    b = c1 != 0;

    tmp_r = #LEA(tmp_bo + 1);
    tmp_r = #CMOVcc(b, tmp_r, tmp_bo);
    (u64)[bucket_occupancy + 8 * curr_bucket] = tmp_r;
    tmp_bo = (64u)[bucket_assignments + 8 * i];
    tmp_r = #CMOVcc(b, curr_bucket, tmp_bo);
    (u64)[bucket_assignments + 8 * i] = tmp_r;
    i += 1;
  }
  // at the end, every bucket should be full
}

inline
fn _stash_assign_buckets(
  reg u64 stash path
)
{
  // standard variables
  reg u64 ub;
  // pointer variables
  reg u64 bucket_assignments bucket_occupancy;
  // temporary variables
  reg u64 it;
  inline int i lvl;

  // assign all blocks to "overflow" - level UINT64_MAX and set all occupancy to 0
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  for i = 0 to STASH_NUM_BLOCKS { (u64)[bucket_assignments + 8 * i] = (64u)-1; }
  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  for i = 0 to PATH_LENGTH { (u64)[bucket_occupancy + 8 * i] = (64u)0; }

  // assign blocks in path to buckets first
  for lvl = 0 to PATH_LENGTH
  { for i = 0 to BLOCKS_PER_BUCKET
    {
      _stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_PATH, lvl * BLOCKS_PER_BUCKET + i);
    }
  }

  // assign blocks in overflow to buckets
  ub = _stash_overflow_ub(stash);
  it = 0;
  while (it < ub)
  {
    _stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_OVERFLOW, it);
    it = #LEA(it + 1);
  }

  // now assign empty blocks to fill the buckets
  _stash_place_empty_blocks(stash);
}

inline
fn _comp_blocks(
  reg u64 blocks block_level_assignments,
  reg u64 idx1 idx2
) -> reg u8
{
  reg u64 bla1 bla2 b1 b2 offset;
  reg u8 r s;
  reg bool b;

  bla1 = (64u)[block_level_assignments + 8 * idx1];
  bla2 = (64u)[block_level_assignments + 8 * idx2];
  offset = 8 * idx1;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS;
  offset += 8;
  b1 = (64u)[blocks + offset];
  offset = 8 * idx2;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS;
  offset += 8;
  b2 = (64u)[blocks + offset];

  b = b1 > b2;
  r = #SETcc(b);
  b = bla1 == bla2;
  s = #SETcc(b);
  r &= s;
  b = bla1 > bla2;
  s = #SETcc(b);
  r |= s;
  return r;
}

inline
fn _min(reg u64 a b) -> reg u64
{
  // b ^ ((a ^ b) & -((a - b) >> 63));
  reg u64 sub;
  sub = a;
  sub -= b;
  sub >>= 63;
  sub = -sub;
  a = a;
  a ^= b;
  a &= sub;
  b ^= a;
  return b;
}

inline
fn _odd_even_msort(
  reg u64 blocks block_level_assignments,
  reg u64 lb ub
)
{
  // indices variables
  reg u64 p k j i;
  // temporary variables
  reg u64 bound mini idx1 idx2 divisor one tmp addr1 addr2;
  // boolean variables
  reg u8 cond;

  () = #spill(blocks, block_level_assignments);
  ub = ub; lb = lb;
  ub -= lb;
  () = #spill(lb);
  p = 1; one = 1;
  while (p < ub) {
    k = p;
    () = #spill(p);
    while (k >= 1) {
      j = k;
      () = #unspill(p);
      tmp = p;
      () = #spill(p);
      tmp -= 1;
      j &= tmp;
      j = j;
      k = k;
      bound = ub;
      bound -= k;
      while (j < bound) {
        () = #spill(bound);
        mini = ub;
        mini -= j;
        mini -= k;
        mini = _min(k, mini);
        i = 0;
        while (i < mini) {
          () = #spill(mini);
          idx1 = #LEA(i + j);
          idx2 = #LEA(idx1 + k);
          () = #unspill(p);
          divisor = p;
          () = #spill(p);
          divisor = #SHL(divisor, one);

          idx1 = idx1 / divisor;
          idx1 = idx1;
          idx2 = idx2;
          idx2 = idx2 / divisor;
          if (idx1 == idx2) {
            idx1 = #LEA(i + j);
            () = #spill(i, j, ub);
            () = #unspill(lb);
            idx1 = #LEA(idx1 + lb);
            () = #spill(lb);
            idx2 = #LEA(idx1 + k);
            () = #spill(k);
            () = #unspill(blocks, block_level_assignments);
            cond = _comp_blocks(blocks, block_level_assignments, idx1, idx2);
            // swap
            addr1 = blocks;
            tmp = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * idx1;
            addr1 += tmp;
            tmp = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * idx2;
            addr2 = #LEA(blocks + tmp);
            () = #spill(blocks);
            _cond_swap_blocks(cond, addr1, addr2);

            addr1 = block_level_assignments;
            tmp = 8 * idx1;
            addr1 += tmp;
            tmp = 8 * idx2;
            addr2 = #LEA(block_level_assignments + tmp);
            () = #spill(block_level_assignments);
            _cond_obv_swap_u64(cond, addr1, addr2);
            () = #unspill(i, j, k, ub);
          }
          () = #unspill(mini);
          i = #LEA(i + 1);
        }
        tmp = k;
        tmp = #SHL(tmp, one);
        j = #LEA(j + tmp);
        () = #unspill(bound);
      }
      k = #SHR(k, one);
    }
    () = #unspill(p);
    p = #SHL(p, one);
  }
}

inline
fn stash_build_path(
  reg u64 stash path
)
{
  reg u64 overflow_size;
  reg u64 blocks bucket_assignments;

  _stash_assign_buckets(stash, path);
  blocks = [stash];
  bucket_assignments = [stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  overflow_size = _stash_overflow_ub(stash);
  overflow_size = #LEA(overflow_size + PATH_LENGTH * BLOCKS_PER_BUCKET);
  _odd_even_msort(blocks, bucket_assignments, 0, overflow_size);
}

inline
fn stash_clear(
  reg u64 stash
)
{
  reg u64 blocks;
  inline int i;

  blocks = [stash];
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS * STASH_NUM_BLOCKS
  {
    (u64)[blocks + 8 * i] = -1;
  }
}
