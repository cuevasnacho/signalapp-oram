require "consts.jinc"
require "util.jinc"
require "bucket.jinc"

inline
fn stash_path_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 p;
  p = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  return p;
}

inline
fn stash_path_overflow_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 p;
  p = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  return p;
}

// returns the index of the last nonempty blocks in overflow
fn stash_overflow_ub(
  reg u64 stash
) -> reg u64
{
  reg u64 i j overflow_blocks bid offset;

  i = (64u)[stash + 8 * OVERFLOW_CAPACITY_ADDR];
  overflow_blocks = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  offset = i;
  offset *= 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  overflow_blocks += offset;
  while (i > 0) {
    overflow_blocks -= 8 * DECRYPTED_BLOCK_SIZE_QWORDS; // (i - 1)
    bid = (64u)[overflow_blocks];
    if bid != EMPTY_BLOCK_ID { j = i; i = 1; }  // TODO: avoid jump
    else { j = 0; }
    i -= 1;
  }
  return j;
}

inline
fn stash_num_overflow_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 r i overflow_capacity overflow_blocks bid;
  reg u8 cond;
  reg bool b;
  r = 0; i = 0;
  overflow_blocks = stash_path_overflow_blocks(stash);
  overflow_capacity = (64u)[stash + 8 * OVERFLOW_CAPACITY_ADDR];
  while (i < overflow_capacity) {
    bid = (64u)[overflow_blocks + 8 * (i + BLOCK_DATA_SIZE_QWORDS)];
    b = bid != EMPTY_BLOCK_ID;
    cond = #SETcc(b);
    r += (64u)cond;
  }
  return r;
}

inline
fn first_block_in_bucket_for_level(
  reg u64 stash,
  reg u64 level
) -> reg u64
{
  reg u64 p offset;
  p = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  offset = level * BLOCKS_PER_BUCKET;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS * 8;
  p = #LEA(p + offset);
  return p;
}

inline
fn cond_copy_block(
  reg u8 cond,
  reg u64 dst src
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    cond_obv_cpy_u64(cond, dst, src);
    dst = #LEA(dst + 8);
    src = #LEA(src + 8);
  }
}

inline
fn cond_swap_blocks(
  reg u8 cond,
  reg u64 a b
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    cond_obv_swap_u64(cond, a, b);
    a = #LEA(a + 8);
    b = #LEA(b + 8);
  }
}

// Precondition: `target` is an empty block OR no block in the bucket has ID equal to `target_block_id`
// Postcondition: No block in the bucket has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn stash_add_path_bucket(
  reg u64 stash bucket_store,
  reg u64 bucket_id target_block_id,
  reg u64 target
)
{
  reg u64 lvl bucket_blocks bid;
  reg u8 c;
  reg bool cond;
  inline int i;

  lvl = tree_path_level(bucket_id);
  bucket_blocks = first_block_in_bucket_for_level(stash, lvl);
  bucket_store_read_bucket_blocks(bucket_store, bucket_id, bucket_blocks);
  for i = 0 to BLOCKS_PER_BUCKET
  {
    bid = (64u)[bucket_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    cond_swap_blocks(c, target, bucket_blocks);
    bucket_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  }
}

// Precondition: `target` is an empty block OR no block in the overflow has ID equal to `target_block_id`
// Postcondition: No block in the overflow has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn stash_scan_overflow_for_target(
  reg u64 stash,
  reg u64 target_block_id,
  reg u64 target
)
{
  reg u64 ub i bid overflow_blocks offset;
  reg u8 c;
  reg bool cond;

  ub = stash_overflow_ub(stash);
  overflow_blocks = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  i = 0;
  while (i < ub)
  {
    bid = (64u)[overflow_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    cond_swap_blocks(c, target, overflow_blocks);
    overflow_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
    i += 1;
  }
}

// Precondition: there is no block with ID `new_block->id` anywhere in the stash - neither the path_Stash nor the overflow.
inline
fn stash_add_block(
  reg u64 stash new_block
)
{
  reg u64 bid i overflow_capacity overflow_blocks tmp;
  reg u8 c1 c2;
  reg bool b;

  overflow_blocks = stash_path_overflow_blocks(stash);
  overflow_capacity = [stash + 8 * OVERFLOW_CAPACITY_ADDR];
  c1 = 0; // inserted
  while (i < overflow_capacity)
  {
    bid = [overflow_blocks + 8 * BLOCK_DATA_SIZE_QWORDS * i];
    // cond
    c1 = !c1;
    b = bid == EMPTY_BLOCK_ID;
    c2 = #SETcc(b);
    c2 &= c1;
    tmp = #LEA(overflow_blocks + 8 * i);
    cond_copy_block(cond, tmp, new_block);
    c1 = !c1;
    c1 |= c2;
    i += 1;
  }
  // TODO: implement extend overflow and insert
}

inline
fn stash_assign_block_to_bucket(
  reg u64 stash path,
  reg u8 t,
  reg u64 index
)
{
  // standard variables
  reg u64 max_level assignment_index lvl;
  // pointer variables
  reg u64 path_blocks block bucket_occupancy bucket_assignments;
  // temporary variables
  reg u64 r1 r2 bucket_id bid bpos tree_bound tmp;
  // boolean variables
  reg u8 c1 c2 c3;
  reg bool b;
  
  // the block cannot be assigned to this level or higher
  if (t == BLOCK_TYPE_OVERFLOW) { // is_overflow_block
    max_level = (64u)PATH_LENGTH;
    assignment_index = #LEA(BLOCKS_PER_BUCKET * PATH_LENGTH + index);
  } else {
    max_level = index;
    tmp = BLOCKS_PER_BUCKET;
    max_level = max_level / tmp;
    max_level = #LEA(max_level + 1);
    assignment_index = index;
  }

  path_blocks = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  tmp = assignment_index;
  tmp *= 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  bid = (64u)[path_blocks + tmp];
  bpos = (64u)[path_blocks + tmp + 8];

  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  () = #spill(path, stash, assignment_index, bucket_assignments);

  c1 = #set0_8(); // is_assigned
  lvl = 0;
  while (lvl < max_level)
  {
    r2 = (64u)[bucket_occupancy + 8 * lvl];
    () = #unspill(path);
    bucket_id = (64u)[path + 8 + 8 * lvl];

    c1 = !c1;
    // is_valid
    tree_bound = tree_path_lower_bound(bucket_id);
    b = tree_bound <= bpos;
    c2 = #SETcc(b);
    c2 &= c1;
    tree_bound = tree_path_upper_bound(bucket_id);
    b = tree_bound >= bpos;
    c3 = #SETcc(b);
    c2 &= c3;
    // bucket_has_room
    b = r2 < BLOCKS_PER_BUCKET;
    c3 = #SETcc(b);
    c2 &= c3;
    // not is_empty
    b = bid != EMPTY_BLOCK_ID;
    c3 = #SETcc(b);
    c2 &= c3;
    // is_assigned = cond | is_assigned;
    c1 = !c1;
    c1 |= c2;
    b = c2 != 0;
    
    // If `b` is true, put it in the bucket: increment the bucket occupancy and set the bucket assignment
    // for this position.
    // increment this, it will only get saved if `b` is true.
    r1 = #LEA(r2 + 1);
    r1 = #CMOVcc(b, r1, r2);
    () = #unspill(assignment_index, bucket_assignments);
    (u64)[bucket_occupancy + 8 * lvl] = r1;
    r1 = (64u)[bucket_assignments + 8 * assignment_index];
    r1 = #CMOVcc(b, lvl, r1);
    (u64)[bucket_assignments + 8 * assignment_index] = r1;
    
    lvl = #LEA(lvl + 1);
  }
}

fn stash_place_empty_blocks(
  reg u64 stash
)
{
  // standard variables
  reg u64 curr_bucket;
  // pointer variables
  reg u64 blocks bucket_occupancy bucket_assignments;
  // temporary variables
  reg u64 tmp_bo bid i tmp_r offset;
  // boolean variables
  reg u8 c1 c2;
  reg bool b;
  inline int j;

  blocks = (64u)[stash];
  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  curr_bucket = #set0();
  i = 0;
  while (i < NUM_BLOCKS)
  {
    c1 = 0; // found_curr_bucket
    for j = 0 to PATH_LENGTH
    {
      c1 = !c1;
      // bucket_has_room
      tmp_bo = (64u)[bucket_occupancy + 8 * j];
      b = tmp_bo != BLOCKS_PER_BUCKET;
      c2 = #SETcc(b);
      c2 &= c1;
      // set_curr_bucket
      b = c2 != 0;
      tmp_r = (64u)j;
      curr_bucket = #CMOVcc(b, tmp_r, curr_bucket);
      c1 = !c1;
      c1 |= c2;
    }
    tmp_bo = (64u)[bucket_occupancy + 8 * curr_bucket];
    offset = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * i;
    bid = (64u)[blocks + offset];
    // cond_place_in_bucket
    b = bid == EMPTY_BLOCK_ID;
    c2 = #SETcc(b);
    b = tmp_bo < BLOCKS_PER_BUCKET;
    c1 = #SETcc(b);
    c1 &= c2;
    b = c1 != 0;

    tmp_r = #LEA(tmp_bo + 1);
    tmp_r = #CMOVcc(b, tmp_r, tmp_bo);
    (u64)[bucket_occupancy + 8 * curr_bucket] = tmp_r;
    tmp_bo = (64u)[bucket_assignments + 8 * i];
    tmp_r = #CMOVcc(b, curr_bucket, tmp_bo);
    (u64)[bucket_assignments + 8 * i] = tmp_r;
    i += 1;
  }
  // at the end, every bucket should be full
}

fn stash_assign_buckets(
  reg u64 stash path
)
{
  // standard variables
  reg u64 ub;
  // pointer variables
  reg u64 bucket_assignments bucket_occupancy;
  // temporary variables
  reg u64 it;
  inline int i lvl;

  // assign all blocks to "overflow" - level UINT64_MAX and set all occupancy to 0
  bucket_assignments = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  for i = 0 to NUM_BLOCKS { (u64)[bucket_assignments + 8 * i] = (64u)-1; }
  bucket_occupancy = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  for i = 0 to PATH_LENGTH { (u64)[bucket_occupancy + 8 * i] = (64u)0; }

  // assign blocks in path to buckets first
  for lvl = 0 to PATH_LENGTH
  { for i = 0 to BLOCKS_PER_BUCKET
    {
      stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_PATH, lvl * BLOCKS_PER_BUCKET + i);
    }
  }

  // assign blocks in overflow to buckets
  ub = stash_overflow_ub(stash);
  it = 0;
  while (it < ub)
  {
    stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_OVERFLOW, it);
    it = #LEA(it + 1);
  }

  // now assign empty blocks to fill the buckets
  stash_place_empty_blocks(stash);
}

inline
fn comp_blocks(
  reg u64 blocks block_level_assignments,
  reg u64 idx1 idx2
) -> reg u8
{
  reg u64 bla1 bla2 b1 b2 offset;
  reg u8 r s;
  reg bool b;

  bla1 = (64u)[block_level_assignments + 8 * idx1];
  bla2 = (64u)[block_level_assignments + 8 * idx2];
  offset = 8 * idx1;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS;
  offset += 8;
  b1 = (64u)[blocks + offset];
  offset = 8 * idx2;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS;
  offset += 8;
  b2 = (64u)[blocks + offset];

  b = b1 > b2;
  r = #SETcc(b);
  b = bla1 == bla2;
  s = #SETcc(b);
  r &= s;
  b = bla1 > bla2;
  s = #SETcc(b);
  r |= s;
  return r;
}

// Precondition: `blocks` and `block_level_assignments` length are the same and it is 2^k for some k
fn bitonic_sort(
  reg u64 blocks block_level_assignments
)
{
  reg u64 size start k i i_bound j addr1 addr2 offset;
  // for (size_t size = 2; size <= n; size <<= 1)
  size = 2;
  while (size <= ARR_SIZE) {
    // for (size_t start = 0; start < n; start += size)
    start = 0;
    while (start < ARR_SIZE) {
      // for (size_t k = size>>1; k > 0; k >>= 1)
      k = size;
      () = #spill(size);
      k >>= 1;
      while (k > 0) {
        // for (size_t i = start; i < start + size - k; i++)
        i = start;
        () = #unspill(size);
        i_bound = #LEA(start + size);
        () = #spill(size);
        i_bound -= k;
        while (i < i_bound) {
          reg u8 cond;
          j = #LEA(i + k);
          cond = comp_blocks(blocks, block_level_assignments, i, j);
          addr1 = blocks;
          offset = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * i;
          addr1 += offset;
          offset = 8 * DECRYPTED_BLOCK_SIZE_QWORDS * k;
          addr2 = #LEA(addr1 + offset);
          cond_swap_blocks(cond, addr1, addr2);
          addr1 = block_level_assignments;
          offset = 8 * i;
          addr1 += offset;
          offset = 8 * k;
          addr2 = #LEA(addr1 + offset);
          cond_obv_swap_u64(cond, addr1, addr2);
          i += 1;
        }
        k >>= 1;
      }
      () = #unspill(size);
      start += size;
    }
    size <<= 1;
  }
}

inline
fn stash_build_path(
  reg u64 stash path
)
{
  reg u64 overflow_size;
  reg u64 blocks bucket_assignments;

  overflow_size = stash_overflow_ub(stash);
  stash_assign_buckets(stash, path);
  blocks = [stash];
  bucket_assignments = [stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  bitonic_sort(blocks, bucket_assignments);
}

inline
fn stash_clear(
  reg u64 stash
)
{
  reg u64 blocks;
  inline int i;

  blocks = [stash];
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS * NUM_BLOCKS
  {
    (u64)[blocks + 8 * i] = -1;
  }
}


// ------ using stacks --------

fn stash_create(
  reg ptr u64[STASH_SIZE] stash
) -> reg ptr u64[STASH_SIZE]
{
  stack u64[STASH_SIZE] stash_s;
  inline int i;

  stash = stash_s;
  stash[STASH_BLOCKS_SIZE] = 0;                                 // path_blocks
  stash[STASH_BLOCKS_SIZE + 1] = NUM_PATH_BLOCKS;               // overflow_blocks
  stash[STASH_BLOCKS_SIZE + 2] = NUM_BLOCKS - NUM_PATH_BLOCKS;  // overflow_capacity
  for i = 0 to STASH_BLOCKS_SIZE
  {
    stash[i] = -1;
  }
  return stash;
}

// returns the index of the last nonempty blocks in overflow
fn i_stash_overflow_ub(
  reg ptr u64[STASH_SIZE] stash
) -> reg u64
{
  reg u64 i j overflow_blocks bid tmp;
  reg bool cond;

  overflow_blocks = stash[STASH_BLOCKS_SIZE + 1];
  i = stash[STASH_BLOCKS_SIZE + 2];
  overflow_blocks += i;
  overflow_blocks -= 1;
  while (i > 0) {
    bid = stash[overflow_blocks * DECRYPTED_BLOCK_SIZE_QWORDS];
    cond = bid != EMPTY_BLOCK_ID;
    j = #CMOVcc(cond, i, 0);
    tmp = i - 1;
    i = #CMOVcc(cond, 0, tmp);
  }
  return j;
}

inline
fn i_stash_num_overflow_blocks(
  reg u64 stash
) -> reg u64
{
  reg u64 r i overflow_capacity overflow_blocks bid;
  reg u8 cond;
  reg bool b;
  r = 0; i = 0;
  overflow_blocks = stash_path_overflow_blocks(stash);
  overflow_capacity = [stash + 8 * OVERFLOW_CAPACITY_ADDR];
  while (i < overflow_capacity) {
    bid = [overflow_blocks + 8 * (i + BLOCK_DATA_SIZE_QWORDS)];
    b = bid != EMPTY_BLOCK_ID;
    cond = #SETcc(b);
    r += (64u)cond;
  }
  return r;
}

inline
fn i_first_block_in_bucket_for_level(
  reg u64 stash,
  reg u64 level
) -> reg u64
{
  reg u64 p offset;
  p = [stash + 8 * PATH_BLOCKS_ADDR];
  offset = level * BLOCKS_PER_BUCKET;
  offset *= DECRYPTED_BLOCK_SIZE_QWORDS * 8;
  p = #LEA(p + offset);
  return p;
}

inline
fn i_cond_copy_block(
  reg u8 cond,
  reg u64 dst src
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    cond_obv_cpy_u64(cond, dst, src);
    dst = #LEA(dst + 8);
    src = #LEA(src + 8);
  }
}

inline
fn i_cond_swap_blocks(
  reg u8 cond,
  reg u64 a b
)
{
  inline int i;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS {
    cond_obv_swap_u64(cond, a, b);
    a = #LEA(a + 8);
    b = #LEA(b + 8);
  }
}

// Precondition: `target` is an empty block OR no block in the bucket has ID equal to `target_block_id`
// Postcondition: No block in the bucket has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn i_stash_add_path_bucket(
  reg u64 stash bucket_store,
  reg u64 bucket_id target_block_id,
  reg u64 target
)
{
  reg u64 lvl bucket_blocks bid;
  reg u8 c;
  reg bool cond;
  inline int i;

  lvl = tree_path_level(bucket_id);
  bucket_blocks = first_block_in_bucket_for_level(stash, lvl);
  bucket_store_read_bucket_blocks(bucket_store, bucket_id, bucket_blocks);
  for i = 0 to BLOCKS_PER_BUCKET
  {
    bid = [bucket_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    cond_swap_blocks(c, target, bucket_blocks);
    bucket_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
  }
}

// Precondition: `target` is an empty block OR no block in the overflow has ID equal to `target_block_id`
// Postcondition: No block in the overflow has ID equal to `target_block_id`, `target` is either empty or `target->id == target_block_id`.
fn i_stash_scan_overflow_for_target(
  reg u64 stash,
  reg u64 target_block_id,
  reg u64 target
)
{
  reg u64 ub i bid overflow_blocks offset;
  reg u8 c;
  reg bool cond;

  ub = stash_overflow_ub(stash);
  overflow_blocks = [stash + 8 * OVERFLOW_BLOCKS_ADDR];
  i = 0;
  while (i < ub)
  {
    bid = [overflow_blocks];
    cond = bid == target_block_id;
    c = #SETcc(cond);
    cond_swap_blocks(c, target, overflow_blocks);
    overflow_blocks += 8 * DECRYPTED_BLOCK_SIZE_QWORDS;
    i += 1;
  }
}

inline
fn i_stash_assign_block_to_bucket(
  reg u64 stash path, // path is the pointer to values
  inline int t,
  reg u64 index
)
{
  // standard variables
  reg u64 max_level assignment_index lvl;
  // pointer variables
  reg u64 path_blocks block bucket_occupancy;
  // temporary variables
  reg u64 r1 r2 bucket_id bid bpos tree_bound bucket_assignments;
  // boolean variables
  reg u8 c1 c2;
  reg bool b;

  b = t == BLOCK_TYPE_OVERFLOW;  // is_overflow_block

  // the block cannot be assigned to this level or higher
  r1 = (64u)PATH_LENGTH;
  r2 = (index / BLOCKS_PER_BUCKET) + 1;
  max_level = #CMOVcc(b, r1, r2);
  r1 = BLOCKS_PER_BUCKET * PATH_LENGTH + index;
  assignment_index = #CMOVcc(b, r1, index);

  path_blocks = [stash + 8 * PATH_BLOCKS_ADDR];
  block = [path_blocks + 8 * DECRYPTED_BLOCK_SIZE_QWORDS * assignment_index];
  bid = [block];
  bpos = [block + 8];

  bucket_occupancy = [stash + 8 * BUCKET_OCCUPANCY_ADDR];

  c1 = 0; // is_assigned
  lvl = 0;
  while (lvl < max_level)
  {
    r2 = [bucket_occupancy + 8 * lvl];
    bucket_id = [path + 8 + 8 * lvl];

    c1 = !c1;
    // is_valid
    tree_bound = tree_path_lower_bound(bucket_id);
    b = tree_bound <= bpos;
    c2 = #SETcc(b);
    c1 &= c2;
    tree_bound = tree_path_upper_bound(bucket_id);
    b = tree_bound >= bpos;
    c2 = #SETcc(b);
    c1 &= c2;
    // bucket_has_room
    b = r2 < BLOCKS_PER_BUCKET;
    c2 = #SETcc(b);
    c1 &= c2;
    // not is_empty
    b = bid != EMPTY_BLOCK_ID;
    c2 = #SETcc(b);
    c1 &= c2;
    b = c1 != 0;

    // If `b` is true, put it in the bucket: increment the bucket occupancy and set the bucket assignment
    // for this position.
    // increment this, it will only get saved if `b` is true.
    r1 = r2 + 1;
    r1 = #CMOVcc(b, r1, r2);
    [stash + 8 * (BUCKET_OCCUPANCY_ADDR + lvl)] = r1;
    bucket_assignments = [stash + 8 * (BUCKET_ASSIGNMENTS_ADDR + assignment_index)];
    r1 = #CMOVcc(b, lvl, bucket_assignments);
    [stash + 8 * (BUCKET_ASSIGNMENTS_ADDR + assignment_index)] = r1;

    lvl += 1;
  }
}

fn i_stash_place_empty_blocks(
  reg u64 stash
)
{
  // standard variables
  reg u64 curr_bucket;
  // pointer variables
  reg u64 bucket_occupancy blocks;
  // temporary variables
  reg u64 tmp_bo bid bucket_assignments i tmp_r;
  // boolean variables
  reg u8 c1 c2;
  reg bool b;
  inline int j;

  blocks = [stash];
  bucket_occupancy = [stash + 8 * BUCKET_OCCUPANCY_ADDR];
  bucket_assignments = [stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  curr_bucket = 0;
  i = 0;
  while (i < NUM_BLOCKS)
  {
    c1 = 0; // found_curr_bucket
    for j = 0 to PATH_LENGTH
    {
      tmp_bo = [bucket_occupancy + 8 * j];
      c1 = !c1;
      // bucket_has_room
      b = tmp_bo != BLOCKS_PER_BUCKET;
      c2 = #SETcc(b);
      c1 &= c2;
      // set_curr_bucket
      b = c1 != 0;
      tmp_r = (64u)j;
      curr_bucket = #CMOVcc(b, curr_bucket, tmp_r);
    }
    tmp_bo = [bucket_occupancy + 8 * curr_bucket];
    bid = [blocks + 8 * (DECRYPTED_BLOCK_SIZE_QWORDS + i)];
    // cond_place_in_bucket
    b = tmp_bo < BLOCKS_PER_BUCKET;
    c1 = #SETcc(b);
    b = bid == EMPTY_BLOCK_ID;
    c2 = #SETcc(b);
    c1 &= c2;
    b = c1 != 0;

    tmp_r = #LEA(tmp_bo + 1);
    tmp_r = #CMOVcc(b, tmp_r, tmp_bo);
    [bucket_occupancy + 8 * curr_bucket] = tmp_r;
    tmp_bo = [bucket_assignments + 8 * i];
    tmp_r = #CMOVcc(b, curr_bucket, tmp_bo);
    [bucket_assignments + 8 * i] = tmp_r;
    i += 1;
  }
  // at the end, every bucket should be full
}

fn i_stash_assign_buckets(
  reg u64 stash path
)
{
  // standard variables
  reg u64 ub;
  // pointer variables
  reg u64 bucket_assignments bucket_occupancy;
  // temporary variables
  reg u64 it;
  inline int i lvl;

  // assign all blocks to "overflow" - level UINT64_MAX and set all occupancy to 0
  bucket_assignments = [stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  for i = 0 to NUM_BLOCKS { [bucket_assignments + 8 * i] = (64u)-1; }
  bucket_occupancy = [stash + 8 * BUCKET_OCCUPANCY_ADDR];
  for i = 0 to PATH_LENGTH { [bucket_occupancy + 8 * i] = (64u)0; }

  // assign blocks in path to buckets first
  for lvl = 0 to PATH_LENGTH
  { for i = 0 to BLOCKS_PER_BUCKET
    {
      stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_PATH, lvl * BLOCKS_PER_BUCKET + i);
    }
  }

  // assign blocks in overflow to buckets
  ub = stash_overflow_ub(stash);
  it = 0;
  while (it < ub)
  {
    stash_assign_block_to_bucket(stash, path, BLOCK_TYPE_OVERFLOW, it);
    it += 1;
  }

  // now assign empty blocks to fill the buckets
  stash_place_empty_blocks(stash);
}